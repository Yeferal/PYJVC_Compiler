/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mlgpy = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[9,10,11,12,17,20],$V1=[23,27],$V2=[1,25],$V3=[12,21,31,62,63,65,68,75,76],$V4=[2,27],$V5=[1,37],$V6=[1,38],$V7=[1,34],$V8=[1,39],$V9=[1,40],$Va=[1,41],$Vb=[1,45],$Vc=[1,46],$Vd=[1,44],$Ve=[1,59],$Vf=[1,52],$Vg=[1,60],$Vh=[1,61],$Vi=[1,62],$Vj=[1,63],$Vk=[1,64],$Vl=[1,65],$Vm=[1,57],$Vn=[1,54],$Vo=[12,21,23,31,62,63,65,68,75,76],$Vp=[1,74],$Vq=[1,75],$Vr=[12,21,23,24,31,59,60,62,63,65,68,75,76],$Vs=[2,56],$Vt=[1,80],$Vu=[1,81],$Vv=[1,82],$Vw=[1,83],$Vx=[1,84],$Vy=[1,85],$Vz=[12,21,23,24,31,51,52,53,54,55,56,59,60,62,63,65,68,75,76],$VA=[2,50],$VB=[2,52],$VC=[1,87],$VD=[1,88],$VE=[1,89],$VF=[1,90],$VG=[1,91],$VH=[1,92],$VI=[1,94],$VJ=[12,21,23,24,31,43,44,45,46,47,48,51,52,53,54,55,56,59,60,62,63,65,68,75,76],$VK=[12,21,23,24,27,31,43,44,45,46,47,48,51,52,53,54,55,56,59,60,62,63,65,68,75,76],$VL=[51,52,53,54,55,56,59,60],$VM=[1,108],$VN=[1,110],$VO=[12,21,23,24,31,43,44,51,52,53,54,55,56,59,60,62,63,65,68,75,76],$VP=[12,21,23,24,31,43,44,45,46,47,51,52,53,54,55,56,59,60,62,63,65,68,75,76],$VQ=[1,133],$VR=[1,134],$VS=[2,81],$VT=[1,142],$VU=[1,143];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"BLOQUES_CODE":4,"EOF":5,"BLOQUE_PYTHON":6,"BLOQUE_JAVA_PROGRAM":7,"BLANCOS":8,"comentario_bloque":9,"comentario_simple":10,"indent":11,"dedent":12,"STATE_INDENT":13,"STATE_DEDENT":14,"block_python":15,"CODIGO_PY":16,"block_jv":17,"block_programa":18,"STRUCT_FUNCION":19,"def":20,"id":21,"par_a":22,"par_c":23,"dos_puntos":24,"STATE_CODE":25,"PARAM_DEF":26,"coma":27,"DECLARACION_VAR":28,"MENSAJES":29,"SOLICITUD":30,"return":31,"STATE_VALUE":32,"CICLOS":33,"SENTENCIA_IF":34,"valor":35,"entero":36,"decimal":37,"cadena":38,"caracter":39,"true":40,"false":41,"OPERACION_ARITMETICA":42,"mas":43,"menos":44,"por":45,"div":46,"mod":47,"pot":48,"OPERACION_RACIONAL":49,"STATE_OP_RACIONAL":50,"mayor_q":51,"menor_q":52,"igual_igual":53,"mayor_igual":54,"menor_igual":55,"diferente":56,"OPERACION_LOGICA":57,"STATE_OP_LOGICA":58,"and":59,"or":60,"not":61,"println":62,"print":63,"igual":64,"input":65,"CICLO_FOR":66,"CICLO_WHILE":67,"for":68,"in":69,"range":70,"PARAM_RANGE":71,"CODE_CICLOS":72,"continue":73,"break":74,"while":75,"if":76,"STATE_ELIF":77,"elif":78,"else":79,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",9:"comentario_bloque",10:"comentario_simple",11:"indent",12:"dedent",15:"block_python",17:"block_jv",18:"block_programa",20:"def",21:"id",22:"par_a",23:"par_c",24:"dos_puntos",27:"coma",31:"return",36:"entero",37:"decimal",38:"cadena",39:"caracter",40:"true",41:"false",43:"mas",44:"menos",45:"por",46:"div",47:"mod",48:"pot",51:"mayor_q",52:"menor_q",53:"igual_igual",54:"mayor_igual",55:"menor_igual",56:"diferente",59:"and",60:"or",61:"not",62:"println",63:"print",64:"igual",65:"input",68:"for",69:"in",70:"range",73:"continue",74:"break",75:"while",76:"if",78:"elif",79:"else"},
productions_: [0,[3,2],[4,2],[8,1],[8,1],[8,1],[8,1],[13,1],[14,1],[6,2],[7,2],[16,2],[16,2],[16,2],[16,2],[16,2],[16,0],[19,8],[19,9],[26,3],[26,1],[25,2],[25,2],[25,2],[25,3],[25,2],[25,2],[25,0],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[35,1],[42,3],[42,3],[42,3],[42,3],[42,3],[42,3],[42,2],[42,3],[42,1],[49,3],[49,3],[49,3],[49,3],[49,3],[49,3],[50,1],[50,3],[50,1],[57,3],[57,3],[57,2],[58,1],[58,3],[58,1],[32,1],[32,1],[29,4],[29,4],[29,3],[29,3],[28,1],[28,3],[30,3],[33,1],[33,1],[66,11],[71,1],[71,3],[71,5],[72,1],[72,2],[72,2],[67,6],[34,7],[77,7],[77,5],[77,0]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,6:3,15:[1,4]},{1:[3]},{5:[1,5]},{7:6,17:[1,7]},o($V0,[2,16],{16:8}),{1:[2,1]},{5:[2,2]},{18:[1,9]},{9:[1,11],10:[1,12],11:[1,13],12:[1,14],17:[2,9],19:10,20:[1,15]},{5:[2,10]},o($V0,[2,11]),o($V0,[2,12]),o($V0,[2,13]),o($V0,[2,14]),o($V0,[2,15]),{21:[1,16]},{22:[1,17]},{21:[1,20],23:[1,18],26:19},{24:[1,21]},{23:[1,22],27:[1,23]},o($V1,[2,20]),{11:$V2,13:24},{24:[1,26]},{21:[1,27]},o($V3,$V4,{25:28}),o([12,21,31,62,63,65,68,73,74,75,76],[2,7]),{11:$V2,13:29},o($V1,[2,19]),{12:$V5,14:30,21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},o($V3,$V4,{25:47}),o($V0,[2,17]),o($V3,[2,21]),o($V3,[2,22]),o($V3,[2,23]),{21:$Ve,22:$Vf,30:50,32:48,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:49,61:$Vn,65:$Va},o($V3,[2,25]),o($V3,[2,26]),o([9,10,11,12,17,20,21,31,62,63,65,68,75,76,78,79],[2,8]),o($V3,[2,65],{64:[1,66]}),{22:[1,67]},{22:[1,68]},{22:[1,69]},o($V3,[2,68]),o($V3,[2,69]),{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:70,61:$Vn},{21:[1,71]},{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:72,61:$Vn},{12:$V5,14:73,21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},o($V3,[2,24]),o($Vo,[2,59],{59:$Vp,60:$Vq}),o($Vo,[2,60]),o($Vr,$Vs),{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:78,44:$Vm,49:77,50:53,57:76,58:79,61:$Vn},o($Vr,[2,58],{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy}),{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:86,61:$Vn},o($Vz,$VA),o($Vz,$VB,{43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH}),{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:93,44:$Vm},o($VJ,[2,43]),o($VK,[2,28]),o($VK,[2,29]),o($VK,[2,30]),o($VK,[2,31]),o($VK,[2,32]),o($VK,[2,33]),o($VK,[2,34]),{21:$Ve,22:$Vf,30:50,32:95,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:49,61:$Vn,65:$Va},{21:$Ve,22:$Vf,23:[1,97],30:50,32:96,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:49,61:$Vn,65:$Va},{21:$Ve,22:$Vf,23:[1,99],30:50,32:98,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:49,61:$Vn,65:$Va},{23:[1,100]},{24:[1,101],59:$Vp,60:$Vq},{69:[1,102]},{24:[1,103],59:$Vp,60:$Vq},o($V0,[2,18]),{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:104,61:$Vn},{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:105,61:$Vn},o([59,60],$Vs,{23:[1,106]}),o($VL,$VA,{23:[1,107]}),o($VL,$VB,{23:$VM,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH}),{59:$Vp,60:$Vq},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:109},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:111},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:112},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:113},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:114},{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:115},o($Vr,[2,55]),{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:116,44:$Vm},{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:117,44:$Vm},{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:118,44:$Vm},{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:119,44:$Vm},{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:120,44:$Vm},{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:121,44:$Vm},o($VJ,[2,41]),{21:$Ve,22:$VI,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:122,44:$Vm},o($V3,[2,66]),{23:[1,123]},o($V3,[2,63]),{23:[1,124]},o($V3,[2,64]),o($Vo,[2,67]),{11:$V2,13:125},{70:[1,126]},{11:$V2,13:127},o($Vr,[2,53]),o([12,21,23,24,31,60,62,63,65,68,75,76],[2,54],{59:$Vp}),o($Vr,[2,57]),o($Vz,[2,51]),o($VJ,[2,42]),o($Vz,[2,44]),{21:$Ve,22:$VN,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:78,44:$Vm,49:77,50:128},o($Vz,[2,45]),o($Vz,[2,46]),o($Vz,[2,47]),o($Vz,[2,48]),o($Vz,[2,49]),o($VO,[2,35],{45:$VE,46:$VF,47:$VG,48:$VH}),o($VO,[2,36],{45:$VE,46:$VF,47:$VG,48:$VH}),o($VP,[2,37],{48:$VH}),o($VP,[2,38],{48:$VH}),o($VP,[2,39],{48:$VH}),o($VJ,[2,40]),{23:$VM,43:$VC,44:$VD,45:$VE,46:$VF,47:$VG,48:$VH},o($V3,[2,61]),o($V3,[2,62]),o($V3,$V4,{25:129}),{22:[1,130]},o($V3,$V4,{72:131,25:132,73:$VQ,74:$VR}),{51:$Vt,52:$Vu,53:$Vv,54:$Vw,55:$Vx,56:$Vy},{12:$V5,14:135,21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},{21:$Ve,35:137,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,71:136},{12:$V5,14:138},{12:[2,74],21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},o($V3,$V4,{25:139}),o($V3,$V4,{25:140}),o($V3,$VS,{77:141,78:$VT,79:$VU}),{23:[1,144]},{23:[2,71],27:[1,145]},o($V3,[2,77]),{12:[2,75],21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},{12:[2,76],21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},o($V3,[2,78]),{21:$Ve,22:$Vf,35:58,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl,42:56,44:$Vm,49:55,50:53,57:51,58:146,61:$Vn},{24:[1,147]},{24:[1,148]},{21:$Ve,35:149,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl},{24:[1,150],59:$Vp,60:$Vq},{11:$V2,13:151},{11:$V2,13:152},{23:[2,72],27:[1,153]},{11:$V2,13:154},o($V3,$V4,{25:155}),o($V3,$V4,{25:132,72:156,73:$VQ,74:$VR}),{21:$Ve,35:157,36:$Vg,37:$Vh,38:$Vi,39:$Vj,40:$Vk,41:$Vl},o($V3,$V4,{25:158}),{12:$V5,14:159,21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},{12:$V5,14:160},{23:[2,73]},{12:$V5,14:161,21:$V6,28:31,29:32,30:33,31:$V7,33:35,34:36,62:$V8,63:$V9,65:$Va,66:42,67:43,68:$Vb,75:$Vc,76:$Vd},o($V3,[2,80]),o($V3,[2,70]),o($V3,$VS,{77:162,78:$VT,79:$VU}),o($V3,[2,79])],
defaultActions: {5:[2,1],6:[2,2],9:[2,10],157:[2,73]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const Posicion = require("./Errores/Posicion.js");
    const ErrorG = require("./Errores/ErrorG.js");

    var listaErrores = new Array();
    let pilaAmbito = [];
    var resultado;

    //para la identacion
    var estadoIdent = false;
    var contadorAmbito=0, ambitoActual=0;

    function iniciar(){
        pilaAmbito.push(0);
    }

    function pintar(texto){
        // console.log(texto+"");
    }

    function verificarIndentacion(value, size){
        if(!(pilaAmbito.length==0)){
            var ambito = pilaAmbito[pilaAmbito.length - 1]
            if((ambito+1)==size){
                pilaAmbito.push(ambito+1);
                console.log(value.substr(1,value.length),'INDENT:',(ambito+1));
                return 'indent';
            }else if((ambito-1)==size){
                pilaAmbito.push(ambito-1);
                console.log(value.substr(1,value.length),'DEDENT:',(ambito-1));
                return 'dedent';
            }else if(ambito==size){
                console.log(value.substr(1,value.length),'SALTO_:',ambito);
                return null;
            }else{
                console.log(value.substr(1,value.length),'ERROR DE identacion');
                // return ' ';
                // return null;
            }
        }else{
            iniciar();
            return verificarIndentacion(value, size);
        }
    }

    function getTabs(texto, size){
        contador = 0;
        contadorS = 0;
        // console.log('<',texto,'> size:',size);
        for(i = 0; i<size; i++){
            caracter = texto.substr(i,1);
            // console.log('char:',caracter,'| tamanio',caracter.length);
            switch(caracter){
                case '\t':
                // case '\n\t':
                    // console.log('Tchar:|'+caracter+'| t');
                    contador++;
                    break;
                case ' ':
                // case '  ':
                // case '    ':
                // case '      ':
                case '\b':
                // case '':
                    // console.log('Tchar:|'+caracter+'| s');
                    contadorS++;
                    break;
                case '\n':
                case '\r':
                    // console.log('Tchar:|'+caracter+'| n');
                    // contador++;
                    break;
                    default:
                    // console.log('Tchar:|'+caracter+'| l');
            }
            if(contadorS==4){
                contador++;
                contadorS = 0;
            }
        }
        // console.log('Contador:',contador);
        return contador;
    }

    function agregarError(linea, columna, tipoError, tokenS, descripcion){
        let posicion = new Posicion.Posicion(linea, columna);
        let errorG = new ErrorG.ErrorG(posicion, tipoError, tokenS, descripcion);
        console.log(`Error>> Linea: ${linea}, Columna: ${columna}, TipoError: ${tipoError}, Token: ${tokenS}, Descripcion: ${descripcion}`);
        listaErrores.push(errorG);
    }
    function getListaErrores(){
        return listaErrores;
    }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"yylineno":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:var sim = verificarIndentacion(yy_.yytext, getTabs(yy_.yytext, yy_.yyleng) ); if(sim!=null){return sim;}else{/*IGNORAR*/}
break;
case 1:var sim = verificarIndentacion(yy_.yytext, getTabs(yy_.yytext, yy_.yyleng) ); if(sim!=null){return sim;}else{/*IGNORAR*/}
break;
case 2:/* skip whitespace */
break;
case 3:pintar(yy_.yytext); return 15;
break;
case 4:pintar(yy_.yytext); return 17;
break;
case 5:pintar(yy_.yytext); return 18;
break;
case 6:pintar('comentario_simple'+yy_.yytext); return 10;
break;
case 7:pintar('comentario_bloque'+yy_.yytext); return 9;
break;
case 8:pintar(yy_.yytext); return 43;
break;
case 9:pintar(yy_.yytext); return 44;
break;
case 10:pintar(yy_.yytext); return 45;
break;
case 11:pintar(yy_.yytext); return 46;
break;
case 12:pintar(yy_.yytext); return 47;
break;
case 13:pintar(yy_.yytext); return 48;
break;
case 14:pintar(yy_.yytext); return 63;
break;
case 15:pintar(yy_.yytext); return 62;
break;
case 16:pintar(yy_.yytext); return 51;
break;
case 17:pintar(yy_.yytext); return 52;
break;
case 18:pintar(yy_.yytext); return 53;
break;
case 19:pintar(yy_.yytext); return 54;
break;
case 20:pintar(yy_.yytext); return 55;
break;
case 21:pintar(yy_.yytext); return 56;
break;
case 22:pintar(yy_.yytext); return 59;
break;
case 23:pintar(yy_.yytext); return 60;
break;
case 24:pintar(yy_.yytext); return 61;
break;
case 25:pintar(yy_.yytext); return 65;
break;
case 26:pintar(yy_.yytext); return 68;
break;
case 27:pintar(yy_.yytext); return 69;
break;
case 28:pintar(yy_.yytext); return 70;
break;
case 29:pintar(yy_.yytext); return 75;
break;
case 30:pintar(yy_.yytext); return 74;
break;
case 31:pintar(yy_.yytext); return 73;
break;
case 32:pintar(yy_.yytext); return 76;
break;
case 33:pintar(yy_.yytext); return 78;
break;
case 34:pintar(yy_.yytext); return 79;
break;
case 35:pintar(yy_.yytext); return 40;
break;
case 36:pintar(yy_.yytext); return 41;
break;
case 37:pintar(yy_.yytext); return 20;
break;
case 38:pintar(yy_.yytext); return 31;
break;
case 39:pintar(yy_.yytext); return 24;
break;
case 40:pintar(yy_.yytext); return 27;
break;
case 41:pintar(yy_.yytext); return 'punto_coma';
break;
case 42:pintar(yy_.yytext); return 22;
break;
case 43:pintar(yy_.yytext); return 23;
break;
case 44:pintar(yy_.yytext); return 'cor_a';
break;
case 45:pintar(yy_.yytext); return 'cor_c';
break;
case 46:pintar(yy_.yytext); return 64;
break;
case 47: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 38; 
break;
case 48: yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-0); return 39; 
break;
case 49:pintar('entero: '+yy_.yytext); return 36;
break;
case 50:pintar('decimal: '+yy_.yytext); return 37;
break;
case 51:pintar('id: '+yy_.yytext); return 21;
break;
case 52:return 5;
break;
case 53:console.log('ERROR'); return 'ERROR';
break;
}
},
rules: [/^(?:([\n]+[\t]*))/,/^(?:([\n]+((    |\\b\\b\\b\\b))*))/,/^(?:[ \r\b\f]+)/,/^(?:([^/'%%PY']*(%%PY)))/,/^(?:((%%JAVA)[^/%%]*(%%)))/,/^(?:((PROGRAMA)[^]*))/,/^(?:[/][/][/]*[^\n]*[\n]?)/,/^(?:[/*][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:\^)/,/^(?:print\b)/,/^(?:println\b)/,/^(?:>)/,/^(?:<)/,/^(?:==)/,/^(?:>=)/,/^(?:<=)/,/^(?:!=)/,/^(?:and\b)/,/^(?:or\b)/,/^(?:not\b)/,/^(?:input\b)/,/^(?:for\b)/,/^(?:in\b)/,/^(?:range\b)/,/^(?:while\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:if\b)/,/^(?:elif\b)/,/^(?:else\b)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:def\b)/,/^(?:return\b)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:=)/,/^(?:"[^\"]*")/,/^(?:'[^\']?')/,/^(?:[0-9]+\b)/,/^(?:[0-9]+(\.)([0-9]+)+\b)/,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mlgpy;
exports.Parser = mlgpy.Parser;
exports.parse = function () { return mlgpy.parse.apply(mlgpy, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}